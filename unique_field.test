<?php

/**
 * @file
 * Unit tests for the Unique Field module.
 */

class UniqueFieldTestCase extends DrupalWebTestCase {
  protected $privileged_user;

  public static function getInfo() {
    return array(
      'name' => 'Unique Field tests',
      'description' => 'Ensure that the Unique Field module functions properly with a variety of field types.',
      'group' => 'Unique Field',
    );
  }

  public function setUp() {
    parent::setUp('field', 'field_ui', 'number', 'text', 'unique_field');

    // TODO: add tests for other types of fields: date, file, link, node
    // reference, user reference, etc.

    // Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser(array(
      'administer content types', 'administer nodes', 'bypass node access', 'unique_field_perm_admin', 'unique_field_perm_bypass',
    ));
    $this->drupalLogin($this->privileged_user);
  }

  /**
   * Test the unique requirement on the title field in the content type scope.
   */
  public function testUniqueTitle() {
    // Create a content type with the title set to be unique
    $edit = array();
    $edit['name'] = 'Unique Title';
    $edit['type'] = 'uf_title';
    $edit['unique_field_fields[title]'] = 'title';
    $this->drupalPost('admin/structure/types/add', $edit, t('Save content type'));
    $this->assertText('The content type Unique Title has been added.', 'Content type added.');

    // Attempt to create 2 nodes with the same title
    $title = $this->randomName(24);
    $edit = array();
    $edit['title'] = $title;
    $edit['body[und][0][value]'] = $this->randomName(48);
    $this->drupalPost('node/add/uf-title', $edit, t('Save'));
    $this->assertText($edit['body[und][0][value]'], 'Unique Title (uf_title) node has been created');
    $edit['body[und][0][value]'] = $this->randomName(48);
    $this->drupalPost('node/add/uf-title', $edit, t('Save'));
    $this->assertText('The Title field requires a unique value, and the specified value is already used', 'Unique Title (uf_title) node with duplicate content could not be created');

    // Check for false negative: Attempt to create a node with a unique title
    $edit = array();
    $edit['title'] = $this->randomName(24);
    $edit['body[und][0][value]'] = $this->randomName(48);
    $this->drupalPost('node/add/uf-title', $edit, t('Save'));
    $this->assertText($edit['body[und][0][value]'], 'Unique Title (uf_title) node has been created');
  }

  /**
   * Test the unique requirement on the node author in the content type scope.
   */
  public function testUniqueAuthor() {
    // Create a content type with the author set to be unique
    $edit = array();
    $edit['name'] = 'Unique Author';
    $edit['type'] = 'uf_author';
    $edit['unique_field_fields[name]'] = 'name';
    $this->drupalPost('admin/structure/types/add', $edit, t('Save content type'));
    $this->assertText('The content type Unique Author has been added.', 'Content type added.');

    // Attempt to create 2 nodes with the same author
    $edit = array();
    $edit['title'] = $this->randomName(24);
    $edit['body[und][0][value]'] = $this->randomName(48);
    $this->drupalPost('node/add/uf-author', $edit, t('Save'));
    $this->assertText($edit['body[und][0][value]'], 'Unique Author (uf_author) node has been created');
    $edit = array();
    $edit['title'] = $this->randomName(24);
    $edit['body[und][0][value]'] = $this->randomName(48);
    $this->drupalPost('node/add/uf-author', $edit, t('Save'));
    $this->assertText('The Author field requires a unique value, and the specified value is already used', 'Unique Author (uf_author) node with duplicate content could not be created');

    // Check for false negative: Attempt to create a node with a unique author
    $new_account = $this->drupalCreateUser(array('administer nodes', 'bypass node access'));
    $this->drupalLogin($new_account);
    global $user;
    $user = user_load($new_account->uid);
    $edit = array();
    $edit['title'] = $this->randomName(24);
    $edit['body[und][0][value]'] = $this->randomName(48);
    $this->drupalPost('node/add/uf-author', $edit, t('Save'));
    $this->assertText($edit['body[und][0][value]'], 'Unique Author (uf_author) node has been created');
  }

}
